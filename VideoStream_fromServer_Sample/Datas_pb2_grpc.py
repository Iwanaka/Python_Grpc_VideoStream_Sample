# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import Datas_pb2 as Datas__pb2


class MainServerStub(object):
  """responce server
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getStream = channel.stream_stream(
        '/MainServer/getStream',
        request_serializer=Datas__pb2.Request.SerializeToString,
        response_deserializer=Datas__pb2.Reply.FromString,
        )


class MainServerServicer(object):
  """responce server
  """

  def getStream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MainServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getStream': grpc.stream_stream_rpc_method_handler(
          servicer.getStream,
          request_deserializer=Datas__pb2.Request.FromString,
          response_serializer=Datas__pb2.Reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MainServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
